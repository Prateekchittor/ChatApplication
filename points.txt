1. in mongodb atlass ,go to network access -> click on add IP address-> then allow access from anywhere to ensure anyone can acces

2. salting :means add extra random characters to the password to ensure security : 

 npm i bcryptjs 

bcrypt  helps for salting passwords



3. Basic Flow with JWT
1.User logs in ✅: enters id,password

2.Server validates credentials ✅: checks id,pasword length and all

3.Server creates a JWT token and sends it to the client: creates a JWT token(a type of data with header,actualdata..)

4.Client saves it (usually in localStorage or cookies) : frontend receives the token and saves it on local storage

5.Now i visit a protected page (/api/profile). The frontend sends the token: The backend decodes and verifies the token
 whether to stay logged in or logout and go to home page


4. npm cookieparse : this is used to fetch or get the data stored in cookie(ie token data from jwt)


            Frontend






disadvantages of my project
1.Rebuilds the entire message UI each time — even if only 1 new message is added.

2.Can slow down if the chat gets longer (e.g., 100+ messages).

3.To get new message we should make manual call to load message .



so We use Sokcet io  for above 3 problems





